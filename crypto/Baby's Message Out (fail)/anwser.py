#!/usr/bin/env python3
from Crypto.Util.number import getPrime, isPrime, bytes_to_long
# from flag import FLAG
from math import log
import sys

n = pow(10, 5)
sys.setrecursionlimit(n)


def nextPrime(p):
    if isPrime(p):
        return p
    else:
        return nextPrime(p + 61)


# p = getPrime(256)
# q = nextPrime(nextPrime(17*p + 1) + 3)
# r = nextPrime(29*p*q)
# s = nextPrime(q*r + p)
# t = nextPrime(r*s*q)

p = 64257918007820488335758006122679664278630330679750102418248528834889520908213
q = 1092384606132948301707886104085554292736715621555751741110224990193121855458047
r = 2035636453162991834054459001960998163133903653509136668204580402172769834865637666885276315988316615114576849481781908716521336376925266110840570678217972031
s = 2223697925118326697767482177978818674998685050377041628292496383171530508443829175976566505761680543768357366027318381848450043693633319562229590143789032873115238491055397286776798604386628540192591261133829243263756949245434460803687
t = 4944832462175551289609305710696516634933879041568028740764657429399414905119572851329822768709764197047065465370947688923782887764985934867646714152340623155208120629368273990858083502261505884764969636626568690151967786219809070542454961042058027975140945907850312820057944082269816520612808818943141205379918354941014925858472178886269039055954417931639213167102372144675616628460004405396441491851452887668388206263896043483723557184024361719235393211362828335921697

print(q % p, q // p)
print(r % p, r // p)
print(s % p, s // p)
print(t % p, t // p)

n = p*q*r*s*t
e = 65537
# m = bytes_to_long(FLAG.encode())
# c = pow(m, e, n)
# print(f"c: {c}")
# print(f"n: {n}")
